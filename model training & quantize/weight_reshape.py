import tensorflow as tf
import numpy as np
import math
from keras.layers import Dense,Flatten,Conv2D, MaxPooling2D
from keras.models import Sequential
import numpy as np
import keras
from keras.models import Sequential
from keras.layers import Dense,Flatten,Conv2D, MaxPooling2D
from keras.optimizers import Adam
import keras.utils as image
from keras.utils import to_categorical
import tensorflow.python.keras.callbacks as tf_callback
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
# from tensorflow.python.keras.layers import Dense, Dropout, Flatten,Reshape
# from tensorflow.python.keras.layers import Conv2D, MaxPooling2D
import pandas as pd
from sklearn.utils import shuffle
import sys
import numpy as np
from numpy import empty
import math
def f_quantize_conv2(x):
    # decimal
    b_num = 12
    
    del_val = 0
    del_vec = [0,0,0,0,0,0,0,0,0,0,0,0]#decimal part

    if (x>0):
        x_fix = x
        if (x>7.999755859375):
            x_fix = 7.999755859375
        
        del_val = x_fix 

        # get int part in binary 
        # int_vec = list(format(int_val, "b").zfill(4))
        # for i in range(4):
        #     int_vec[i] = int(int_vec[i]) 
        # get dec part in binary
        tmp = del_val
        for i in range(b_num):
            w_bin = 2**-(i+1)
            if(tmp >= w_bin):
                del_vec[i]=1
                tmp = tmp-w_bin
            else:
                del_vec[i]=0
        num_vec = del_vec
    # x<0   
    else:
        x_fix=abs(x)
        if x_fix > 7.999755859375:
            x_fix = 7.999755859375

        del_val = x_fix

        # get int part in binary 
        # int_vec = list(format(int_val, "b").zfill(4))
        # for i in range(4):
        #     int_vec[i] = int(int_vec[i]) 
        # get dec part in binary
        tmp = del_val
        for i in range(b_num):
            w_bin = 2**-(i+1)
            if(tmp >= w_bin):
                del_vec[i]=1
                tmp = tmp-w_bin
            else:
                del_vec[i]=0
        num_vec = del_vec
        # 取反
        for i in range(12):
            if num_vec[i]==1:
                num_vec[i]=0
            else:
                num_vec[i]=1
    encode_out = 0
    for i in range(12):
        w_dec=2**(11-i)
        if(num_vec[i]==1):
            encode_out = encode_out + w_dec
    if(x<0):
        encode_out = encode_out

    encode_out = format(encode_out,'012b')
    return str(encode_out)

from keras.models import load_model
# Load the trained model
model = load_model("model_m.h5")
from numpy import empty
# Get the weights of the model
weights = model.get_weights()
filter_num = []
cont_conv = 0
for idx,i in enumerate(model.layers):
    if(isinstance(i, Conv2D)):
        # sec_conv layer     
        
        if(cont_conv==1):
            w2 = i.get_weights()[0]
            print("w2=",w2.shape)

            for row in range(w2.shape[0]):
                res=''
                res = 'memory_initialization_radix = 2;\nmemory_initialization_vector = \n'
                for filter in range(w2.shape[3]):
                    for depth in range(w2.shape[2]):
                        for col in range(w2.shape[1]):
                            res += f_quantize_conv2(float(w2[row][col][depth][filter]))
                    if (filter != w2.shape[3]-1):
                            res += ',\n'
                res += ';'
                    
                with open('weight_m/c2_w_'+str(row+1)+'_m.coe', 'w') as f:
                    # print('writing \'conv_weights.coe\' file... ', end='')
                    # print('/*\n * This file is auto-generated by gen-weights.py\n */\n',file=f)
                    # print('#pragma once\n\n#include "definitions.h"\n\n',file=f)
                    arrays_def_str = res
                    print(arrays_def_str, file=f)
                    # print('done.')
            
            cont_conv = cont_conv+1
            ########################decimal##########################
            res = " "
            w2 = i.get_weights()[0]
            print("w=",w2.shape)
            # Conversion of weights array.
            new_w = empty(shape=(8,16,3,3))
            print("new shape=",new_w.shape)
            
            for row in range(w2.shape[0]):
                for col in range(w2.shape[1]):
                    for depth in range(w2.shape[2]):
                        for filter in range(w2.shape[3]):
                            new_w[filter][depth][row][col] = w2[row][col][depth][filter]
            w2 = new_w

            # Weights: (label)_weights[kr][kc][f].
            res += '// ' + "conv" + ' layer weights.\n'
            res += 'float ' + 'conv' + '_weights [' + 'FILTERS' + '][' + 'DEPTH' + '][' + 'KRN_ROWS' + '][' \
                    + 'KRN_COLS' + ']\n\t= {\n'
            for filter in range(w2.shape[0]):
                res += '\t\t\t{\n'
                for depth in range(w2.shape[1]):
                    res += '\t\t\t{\n'
                    for row in range(w2.shape[2]):
                        res += '\t\t\t\t{ '
                        for col in range(w2.shape[3]):
                            res += str(float(w2[filter][depth][row][col]))
                            if (col != w2.shape[3]-1):
                                res += ', '
                        res += ' }'
                        if(row != w2.shape[2] -1):
                            res += ','
                        res += '\n'
                    res += '\t\t\t}'
                    if(depth != w2.shape[1] -1):
                        res += ','
                    res += '\n'
                res += '\t\t\t}'
                if(filter != w2.shape[0] -1):
                    res += ','
                res += '\n'
            res +='\t\t};\n\n'

            with open('conv22d_weights.h', 'w') as f:
                print('writing \'conv_weights2d.h\' file... ', end='')
                print('/*\n * This file is auto-generated by gen-weights.py\n */\n',file=f)
                print('#pragma once\n\n#include "definitions.h"\n\n',file=f)
                arrays_def_str = res
                print(arrays_def_str, file=f)
                print('done.')

        cont_conv += 1
